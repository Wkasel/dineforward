(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{599(t,e,a){a.r(e);const r=a(6); const c=(a(23),a(222),a(221));function n(t,e){const a=Object.keys(t);if(Object.getOwnPropertySymbols){let r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(((e) => {return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}class i extends c.a{constructor(t,...e){super(function(t){for(let e=1;e<arguments.length;e++){var a=arguments[e]!=null?arguments[e]:{};e%2?n(Object(a),!0).forEach(((e) => {Object(r.a)(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach(((e) => {Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}({},t,{defaultValue:"defaultValue"in t&&t.defaultValue}),...e),Object(r.a)(this,"serialize",t=>t[this.path]),Object(r.a)(this,"deserialize",t=>t[this.path]),Object(r.a)(this,"getFilterGraphQL",({type:t,value:e})=>{const a=t==="is"?"".concat(this.path):"".concat(this.path,"_").concat(t);return"".concat(a,": ").concat(e)}),Object(r.a)(this,"getFilterLabel",({label:t})=>"".concat(this.label," ").concat(t.toLowerCase())),Object(r.a)(this,"formatFilter",({label:t,value:e})=>"".concat(this.getFilterLabel({label:t}),': "').concat(e,'"')),Object(r.a)(this,"getFilterTypes",()=>[{type:"is",label:"Is",getInitialValue:()=>"true"},{type:"not",label:"Is not",getInitialValue:()=>"true"}])}}e.default=i}}]);